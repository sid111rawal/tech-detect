// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for generating a technology report for a given website.
 *
 * - generateTechnologyReport - A function that generates a technology report for a given website.
 * - GenerateTechnologyReportInput - The input type for the generateTechnologyReport function.
 * - GenerateTechnologyReportOutput - The return type for the generateTechnologyReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {analyzeWebsite, WebsiteAnalysisResult} from '@/services/website-analysis';

const GenerateTechnologyReportInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type GenerateTechnologyReportInput = z.infer<
  typeof GenerateTechnologyReportInputSchema
>;

const TechnologyReportSchema = z.object({
  detectedTechnologies: z
    .array(z.string())
    .describe('A list of detected technologies on the website.'),
  securityConcerns: z
    .array(z.string())
    .describe('A list of potential security concerns for the website.'),
  summary: z
    .string()
    .describe(
      'A summary of the detected technologies and potential security concerns.'
    ),
});

export type GenerateTechnologyReportOutput = z.infer<typeof TechnologyReportSchema>;

export async function generateTechnologyReport(
  input: GenerateTechnologyReportInput
): Promise<GenerateTechnologyReportOutput> {
  return generateTechnologyReportFlow(input);
}

const analyzeWebsiteTool = ai.defineTool({
  name: 'analyzeWebsite',
  description: 'Analyzes a website to detect technologies and potential security concerns.',
  inputSchema: z.object({
    url: z.string().describe('The URL of the website to analyze.'),
  }),
  outputSchema: z.object({
    detectedTechnologies: z
      .array(z.string())
      .describe('A list of detected technologies.'),
    securityConcerns: z
      .array(z.string())
      .describe('A list of potential security concerns.'),
  }),
  async (input): Promise<WebsiteAnalysisResult> => {
    return analyzeWebsite(input.url);
  },
});

const generateTechnologyReportPrompt = ai.definePrompt({
  name: 'generateTechnologyReportPrompt',
  tools: [analyzeWebsiteTool],
  input: {schema: GenerateTechnologyReportInputSchema},
  output: {schema: TechnologyReportSchema},
  prompt: `You are an AI expert in website security and technology analysis.
  Your task is to generate a concise and informative report about the technologies used on a given website and any potential security concerns.

  First, use the analyzeWebsite tool to get raw data about the technologies and security concerns.  The tool returns the technologies detected on the website and any security concerns it finds.

  Then, create a summary of the findings. The summary should highlight the most important technologies and security concerns. Structure the data into a clear and concise report that is easy to understand.

  Make sure that the report includes the following:
  - A list of detected technologies.
  - A list of potential security concerns.
  - A summary of the detected technologies and potential security concerns.

  Use the following format for the report:
  {
    "detectedTechnologies": ["technology1", "technology2", ...],
    "securityConcerns": ["concern1", "concern2", ...],
    "summary": "A brief summary of the detected technologies and security concerns."
  }

  The URL of the website to analyze is: {{{url}}}
  `,
});

const generateTechnologyReportFlow = ai.defineFlow(
  {
    name: 'generateTechnologyReportFlow',
    inputSchema: GenerateTechnologyReportInputSchema,
    outputSchema: TechnologyReportSchema,
  },
  async input => {
    const {output} = await generateTechnologyReportPrompt(input);
    return output!;
  }
);
