
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Flow for generating a technology report for a given website based on signature analysis.
 * This flow is now based purely on the results of the signature-based analyzeWebsiteCode flow.
 *
 * - generateTechnologyReport - A function that generates a technology report for a given website.
 * - GenerateTechnologyReportInput - The input type for the generateTechnologyReport function.
 * - GenerateTechnologyReportOutput - The return type for the generateTechnologyReport function.
 */

import {ai} from '@/ai/genkit'; // Genkit is still used for the flow definition structure
import {z} from 'genkit';
import {analyzeWebsiteCode, type AnalyzeWebsiteCodeOutput} from './analyze-website-code'; // This is the non-AI version

const GenerateTechnologyReportInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type GenerateTechnologyReportInput = z.infer<
  typeof GenerateTechnologyReportInputSchema
>;

const TechnologyReportSchema = z.object({
  detectedTechnologies: z
    .array(z.string()) // Just the names of technologies
    .describe('A list of detected technology names on the website.'),
  // securityConcerns field is removed as it's no longer part of analyzeWebsiteCode output
  summary: z
    .string()
    .describe(
      'A summary of the detected technologies based on signature analysis.'
    ),
  error: z.string().optional().describe("An error message if the report generation or underlying analysis failed."),
});

export type GenerateTechnologyReportOutput = z.infer<typeof TechnologyReportSchema>;

export async function generateTechnologyReport(
  input: GenerateTechnologyReportInput
): Promise<GenerateTechnologyReportOutput> {
  return generateTechnologyReportFlow(input);
}

const generateTechnologyReportFlow = ai.defineFlow(
  {
    name: 'generateTechnologyReportFlow',
    inputSchema: GenerateTechnologyReportInputSchema,
    outputSchema: TechnologyReportSchema,
    // No AI model or prompt needed here
  },
  async (input: GenerateTechnologyReportInput): Promise<GenerateTechnologyReportOutput> => {
    const flowLogPrefix = `[SignatureReportFlow/generateReport URL: ${input.url}]`;
    console.log(`${flowLogPrefix} Report generation flow starting (Signature-Based Only).`);

    // Call the (now non-AI) analyzeWebsiteCode function
    const analysisResult: AnalyzeWebsiteCodeOutput = await analyzeWebsiteCode({ url: input.url });

    if (analysisResult.error) {
        console.warn(`${flowLogPrefix} Underlying analysis failed: ${analysisResult.error}`);
        return {
            detectedTechnologies: [],
            summary: analysisResult.analysisSummary || `Report generation failed due to analysis error for ${input.url}.`,
            error: analysisResult.error,
        };
    }
    
    console.log(`${flowLogPrefix} Received analysis result: ${analysisResult.detectedTechnologies.length} technologies.`);

    const detectedTechnologyNames = analysisResult.detectedTechnologies.map(tech => tech.technology);
    
    const summary = analysisResult.analysisSummary || 
                    (detectedTechnologyNames.length > 0 
                        ? `Signature-based analysis for ${input.url} detected ${detectedTechnologyNames.length} technology/technologies: ${detectedTechnologyNames.join(', ')}.`
                        : `Signature-based analysis for ${input.url} did not detect any technologies with current signatures.`);

    const reportOutput: GenerateTechnologyReportOutput = {
      detectedTechnologies: detectedTechnologyNames,
      summary: summary,
    };
    
    console.log(`${flowLogPrefix} Report generation successful. Summary: ${reportOutput.summary}`);
    return reportOutput;
  }
);
