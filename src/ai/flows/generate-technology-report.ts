// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for generating a technology report for a given website.
 *
 * - generateTechnologyReport - A function that generates a technology report for a given website.
 * - GenerateTechnologyReportInput - The input type for the generateTechnologyReport function.
 * - GenerateTechnologyReportOutput - The return type for the generateTechnologyReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {analyzeWebsite, WebsiteAnalysisResult} from '@/services/website-analysis';
// Import the detailed output schema from analyze-website-code to be used by the tool
import {type AnalyzeWebsiteCodeOutput, AnalyzeWebsiteCodeInputSchema as AnalyzeWebsiteCodeInputSchemaInternal} from './analyze-website-code';


const GenerateTechnologyReportInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type GenerateTechnologyReportInput = z.infer<
  typeof GenerateTechnologyReportInputSchema
>;

// This output schema for the report itself remains simple
const TechnologyReportSchema = z.object({
  detectedTechnologies: z
    .array(z.string())
    .describe('A list of detected technology names on the website.'),
  securityConcerns: z
    .array(z.string())
    .describe('A list of potential security concerns for the website.'),
  summary: z
    .string()
    .describe(
      'A summary of the detected technologies and potential security concerns.'
    ),
});

export type GenerateTechnologyReportOutput = z.infer<typeof TechnologyReportSchema>;

export async function generateTechnologyReport(
  input: GenerateTechnologyReportInput
): Promise<GenerateTechnologyReportOutput> {
  return generateTechnologyReportFlow(input);
}

// The tool now uses the input schema from analyze-website-code and its output schema
// should align with AnalyzeWebsiteCodeOutput.
// However, the analyzeWebsite service itself has its return type defined by WebsiteAnalysisResult.
// So, the tool's output schema will be WebsiteAnalysisResult, which is now an alias for AnalyzeWebsiteCodeOutput.
const analyzeWebsiteTool = ai.defineTool({
  name: 'analyzeWebsite',
  description: 'Analyzes a website to detect technologies and potential security concerns. Returns detailed analysis.',
  inputSchema: AnalyzeWebsiteCodeInputSchemaInternal, // Use the same input schema as analyzeWebsiteCode
  outputSchema: z.custom<AnalyzeWebsiteCodeOutput>(), // The output is the detailed structure
  async (input: z.infer<typeof AnalyzeWebsiteCodeInputSchemaInternal>): Promise<AnalyzeWebsiteCodeOutput> => {
    return analyzeWebsite(input.url);
  },
});

const generateTechnologyReportPrompt = ai.definePrompt({
  name: 'generateTechnologyReportPrompt',
  tools: [analyzeWebsiteTool],
  input: {schema: GenerateTechnologyReportInputSchema},
  output: {schema: TechnologyReportSchema}, // The final report remains simple
  prompt: `You are an AI expert in website security and technology analysis.
  Your task is to generate a concise and informative report about the technologies used on a given website and any potential security concerns.

  First, use the analyzeWebsite tool to get detailed data about the website. The tool returns a complex object including:
  - 'detectedTechnologies': An array of objects, where each object has details like 'technology' (name), 'version', 'confidence', 'isHarmful', 'detectionMethod', and 'category'.
  - 'securityConcerns': An array of strings describing security issues.
  - 'analysisSummary': A summary from the initial analysis.

  From the tool's output:
  1.  Extract only the names of the detected technologies (the 'technology' field from each object in the 'detectedTechnologies' array) to form a simple list of strings for your report's "detectedTechnologies" field.
  2.  Use the 'securityConcerns' array from the tool directly for your report's "securityConcerns" field.
  3.  Then, create a new overall summary based on all the information from the tool (especially its 'analysisSummary' and the nature of detected items). This will be your report's "summary" field.

  Structure your final report into the following JSON format:
  {
    "detectedTechnologies": ["technologyName1", "technologyName2", ...],
    "securityConcerns": ["concern1", "concern2", ...],
    "summary": "Your newly generated brief summary of the detected technologies and potential security concerns based on the tool's detailed output."
  }

  The URL of the website to analyze is: {{{url}}}
  `,
});

const generateTechnologyReportFlow = ai.defineFlow(
  {
    name: 'generateTechnologyReportFlow',
    inputSchema: GenerateTechnologyReportInputSchema,
    outputSchema: TechnologyReportSchema,
  },
  async input => {
    const {output} = await generateTechnologyReportPrompt(input);
    return output!;
  }
);

