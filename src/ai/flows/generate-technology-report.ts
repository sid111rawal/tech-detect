
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Flow for generating a technology report for a given website based on signature analysis.
 *
 * - generateTechnologyReport - A function that generates a technology report for a given website.
 * - GenerateTechnologyReportInput - The input type for the generateTechnologyReport function.
 * - GenerateTechnologyReportOutput - The return type for the generateTechnologyReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {analyzeWebsiteCode, type AnalyzeWebsiteCodeOutput} from './analyze-website-code'; // This is now the non-AI version

const GenerateTechnologyReportInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type GenerateTechnologyReportInput = z.infer<
  typeof GenerateTechnologyReportInputSchema
>;

const TechnologyReportSchema = z.object({
  detectedTechnologies: z
    .array(z.string())
    .describe('A list of detected technology names on the website.'),
  securityConcerns: z
    .array(z.string())
    .describe('A list of potential security concerns for the website. (Currently empty)'),
  summary: z
    .string()
    .describe(
      'A summary of the detected technologies based on signature analysis.'
    ),
});

export type GenerateTechnologyReportOutput = z.infer<typeof TechnologyReportSchema>;

export async function generateTechnologyReport(
  input: GenerateTechnologyReportInput
): Promise<GenerateTechnologyReportOutput> {
  return generateTechnologyReportFlow(input);
}

const generateTechnologyReportFlow = ai.defineFlow(
  {
    name: 'generateTechnologyReportFlow',
    inputSchema: GenerateTechnologyReportInputSchema,
    outputSchema: TechnologyReportSchema,
  },
  async (input: GenerateTechnologyReportInput): Promise<GenerateTechnologyReportOutput> => {
    const flowLogPrefix = `[SignatureReportFlow/generateReport URL: ${input.url}]`;
    console.log(`${flowLogPrefix} Report generation flow starting.`);

    // Call the (now non-AI) analyzeWebsiteCode function
    const analysisResult: AnalyzeWebsiteCodeOutput = await analyzeWebsiteCode({ url: input.url });
    
    console.log(`${flowLogPrefix} Received analysis result: ${analysisResult.detectedTechnologies.length} technologies.`);

    const detectedTechnologyNames = analysisResult.detectedTechnologies.map(tech => tech.technology);
    
    // Generate a simple summary programmatically
    let summary: string;
    if (analysisResult.error) { // Check if analyzeWebsiteCode returned an error summary
        summary = analysisResult.analysisSummary;
    } else if (detectedTechnologyNames.length > 0) {
      summary = `Signature-based analysis for ${input.url} detected ${detectedTechnologyNames.length} technology/technologies: ${detectedTechnologyNames.join(', ')}.`;
    } else {
      summary = `Signature-based analysis for ${input.url} did not detect any technologies with current signatures.`;
    }
    if(analysisResult.analysisSummary && analysisResult.analysisSummary.startsWith("Error during analysis:") || analysisResult.analysisSummary.startsWith("Failed to retrieve website content")) {
        summary = analysisResult.analysisSummary; // Prioritize error summary from analysis
    }


    const reportOutput: GenerateTechnologyReportOutput = {
      detectedTechnologies: detectedTechnologyNames,
      securityConcerns: [], // Security concerns were AI-generated, now empty.
      summary: summary,
    };
    
    console.log(`${flowLogPrefix} Report generation successful. Summary: ${reportOutput.summary}`);
    return reportOutput;
  }
);
