// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for analyzing website code to detect technologies and security concerns.
 *
 * - analyzeWebsiteCode - A function that analyzes website code.
 * - AnalyzeWebsiteCodeInput - The input type for the analyzeWebsiteCode function.
 * - AnalyzeWebsiteCodeOutput - The return type for the analyzeWebsiteCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {retrievePageContent} from '@/services/page-retriever'; // Ensure this path is correct

// Define the schema for detected technologies
const DetectedTechnologySchema = z.object({
  technology: z.string().describe('The name of the detected technology, library, or framework.'),
  confidence: z.number().min(0).max(1).describe('The confidence score (0.0 to 1.0) of this detection.'),
  isHarmful: z.boolean().describe('Whether this technology, in its detected form or version, poses a direct security risk or is often associated with vulnerabilities.'),
});

const AnalyzeWebsiteCodeInputSchema = z.object({
  url: z.string().url().describe('The URL of the website to analyze.'),
});
export type AnalyzeWebsiteCodeInput = z.infer<typeof AnalyzeWebsiteCodeInputSchema>;

const AnalyzeWebsiteCodeOutputSchema = z.object({
  detectedTechnologies: z.array(DetectedTechnologySchema).describe('A list of detected technologies with their confidence and harm potential.'),
  securityConcerns: z.array(z.string()).describe('A list of potential security concerns identified from the code.'),
  analysisSummary: z.string().describe('A brief summary of the analysis, including any issues encountered (e.g., failed to fetch page).'),
});
export type AnalyzeWebsiteCodeOutput = z.infer<typeof AnalyzeWebsiteCodeOutputSchema>;

export async function analyzeWebsiteCode(
  input: AnalyzeWebsiteCodeInput
): Promise<AnalyzeWebsiteCodeOutput> {
  console.log('[AIFlowWrapper/analyzeWebsiteCode] Calling flow with input:', input);
  try {
    const result = await analyzeWebsiteCodeFlow(input);
    console.log('[AIFlowWrapper/analyzeWebsiteCode] Flow returned result:', result);
    return result;
  } catch (error) {
    console.error('[AIFlowWrapper/analyzeWebsiteCode] Error calling flow:', error);
    // Ensure a structured error response consistent with AnalyzeWebsiteCodeOutputSchema
    return {
      detectedTechnologies: [],
      securityConcerns: [],
      analysisSummary: `Error during analysis: ${error instanceof Error ? error.message : 'Unknown error'}. The website content might be inaccessible or the analysis process failed.`,
    };
  }
}

const retrievePageContentTool = ai.defineTool(
  {
    name: 'retrievePageContent',
    description: 'Retrieves the HTML content of a given URL. This should be the first step in the analysis.',
    inputSchema: z.object({
      url: z.string().url().describe('The URL of the website to retrieve content from.'),
    }),
    outputSchema: z.object({
      html: z.string().nullable().describe('The HTML content of the page, or null if an error occurred.'),
      error: z.string().optional().describe('An error message if fetching failed.'),
    }),
  },
  async ({url}): Promise<{html: string | null; error?: string}> => {
    console.log(`[Tool/retrievePageContent] Attempting to fetch: ${url}`);
    try {
      const result = await retrievePageContent(url);
      if (result.error) {
        console.warn(`[Tool/retrievePageContent] Error fetching ${url}: ${result.error}`);
      } else {
        console.log(`[Tool/retrievePageContent] Successfully fetched ${url}. HTML length: ${result.html?.length}`);
      }
      return result;
    } catch (e: any) {
      console.error(`[Tool/retrievePageContent] Exception during fetch for ${url}:`, e);
      return {html: null, error: e.message || 'Unknown error during page retrieval.'};
    }
  }
);


const analyzeWebsiteCodePrompt = ai.definePrompt({
  name: 'analyzeWebsiteCodePrompt',
  input: {schema: AnalyzeWebsiteCodeInputSchema},
  output: {schema: AnalyzeWebsiteCodeOutputSchema},
  tools: [retrievePageContentTool],
  system: `You are an AI expert in website security and technology stack identification.
Your primary goal is to analyze the provided HTML content of a website (obtained via the retrievePageContent tool) and identify:
1.  Specific technologies used (e.g., React, Angular, Vue, jQuery, WordPress, Shopify, specific UI libraries like Bootstrap or Tailwind CSS, analytics tools like Google Analytics, etc.). For each technology, provide its name and your confidence level (0.0 to 1.0) and whether it's potentially harmful or a security risk.
2.  Potential security concerns (e.g., use of outdated libraries, missing security headers, mixed content, exposed API keys in client-side code, common vulnerabilities associated with detected technologies).

You MUST use the retrievePageContent tool first to get the HTML of the website.
If the HTML content is null or an error occurs during retrieval, you should indicate that analysis cannot proceed due to the inability to fetch the page. In this case, the 'detectedTechnologies' and 'securityConcerns' arrays should be empty, and the 'analysisSummary' MUST clearly state that the page could not be fetched and why (using the error message from the tool if available).

Based on the HTML, perform your analysis.
Be thorough. Look for:
- Script tags: src attributes, inline scripts.
- Meta tags: generator tags, framework-specific tags.
- HTML structure: common patterns for frameworks or CMS.
- Inline JSON-LD or microdata.
- Comments in the code.
- Specific CSS class names or ID patterns.
- Presence of known library-specific global variables (e.g., \`window.jQuery\`, \`window.React\`).

For each detected technology:
- "technology": Name of the technology/library/framework.
- "confidence": Your confidence score (0.0 to 1.0) in this detection.
- "isHarmful": A boolean indicating if this technology, in its detected form or version (if known), poses a direct security risk or is often associated with vulnerabilities (e.g., a known-vulnerable version of a library).

For each security concern:
- A string describing the concern.

If no specific technologies are confidently identified, return an empty array for detectedTechnologies.
If no security concerns are found, return an empty array for securityConcerns.

The user has provided the URL: {{{url}}}
Analyze the content retrieved from this URL.
`,
});

const analyzeWebsiteCodeFlow = ai.defineFlow(
  {
    name: 'analyzeWebsiteCodeFlow',
    inputSchema: AnalyzeWebsiteCodeInputSchema,
    outputSchema: AnalyzeWebsiteCodeOutputSchema,
  },
  async (input) => {
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Flow starting. Received input:', input);
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Flow started with input:', input);
    const {output} = await analyzeWebsiteCodePrompt(input);
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Prompt output:', output);

    if (!output) {
      console.error('[AIFlow/analyzeWebsiteCodeFlow] analyzeWebsiteCodePrompt returned no output. This might indicate an LLM or tool error, or invalid API key. Check Genkit logs and tool execution.');
      return {
        detectedTechnologies: [],
        securityConcerns: [],
        analysisSummary:
          'Analysis failed: The AI model did not return a valid output. This could be due to an issue with the AI model or the connection to it. Please check system logs or Genkit monitoring for more details.',
      };
    }
    
    // Log if fetching failed based on a conventional summary or lack of data
    if (output.analysisSummary.includes("Failed to fetch") || output.analysisSummary.includes("cannot proceed") || output.analysisSummary.includes("unable to fetch")) {
        console.warn(`[AIFlow/analyzeWebsiteCodeFlow] Page fetching failed or could not proceed for ${input.url}. Summary: ${output.analysisSummary}`);
    } else if (output.detectedTechnologies.length === 0 && output.securityConcerns.length === 0) {
        console.log(`[AIFlow/analyzeWebsiteCodeFlow] Analysis for ${input.url} completed. No specific technologies or critical security concerns were identified by the AI.`);
    } else {
        console.log(`[AIFlow/analyzeWebsiteCodeFlow] Analysis for ${input.url} successful. Detected ${output.detectedTechnologies.length} technologies and ${output.securityConcerns.length} concerns. Summary: ${output.analysisSummary}`);
    }
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Returning output:', output);
    return output;
  }
);
