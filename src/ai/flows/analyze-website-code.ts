// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for analyzing website code to detect obfuscated or hidden libraries and frameworks.
 *
 * - analyzeWebsiteCode - A function that handles the website code analysis process.
 * - AnalyzeWebsiteCodeInput - The input type for the analyzeWebsiteCode function.
 * - AnalyzeWebsiteCodeOutput - The return type for the analyzeWebsiteCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
// The analyzeWebsite service is not directly used in this flow after refactor,
// but the technologyDetectionTool is still available to the prompt.
// import {analyzeWebsite, WebsiteAnalysisResult} from '@/services/website-analysis';

const AnalyzeWebsiteCodeInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type AnalyzeWebsiteCodeInput = z.infer<typeof AnalyzeWebsiteCodeInputSchema>;

const TechnologyReportSchema = z.object({
  technology: z.string().describe('The detected technology or library.'),
  confidence: z.number().min(0).max(1).describe('Confidence level of the detection (0-1).'),
  isHarmful: z.boolean().describe('Whether the detected technology is potentially harmful.'),
});

const AnalyzeWebsiteCodeOutputSchema = z.object({
  detectedTechnologies: z.array(TechnologyReportSchema).describe('A list of detected technologies and their details.'),
  securityConcerns: z.array(z.string()).describe('A list of potential security concerns found in the website code.'),
});
export type AnalyzeWebsiteCodeOutput = z.infer<typeof AnalyzeWebsiteCodeOutputSchema>;

export async function analyzeWebsiteCode(input: AnalyzeWebsiteCodeInput): Promise<AnalyzeWebsiteCodeOutput> {
  return analyzeWebsiteCodeFlow(input);
}

const technologyDetectionTool = ai.defineTool({
  name: 'detectTechnology',
  description: 'Detects a technology or library used by the website, given a code snippet. Call this for each technology you suspect based on overall website analysis.',
  inputSchema: z.object({
    codeSnippet: z.string().describe('A relevant snippet of code from the website that suggests a particular technology. The LLM must infer or identify this snippet first.'),
    suspectedTechnology: z.string().describe('The name of the technology suspected to be present based on the code snippet.')
  }),
  outputSchema: TechnologyReportSchema,
},
async (toolInput) => {
    // Placeholder implementation - In a real scenario, this tool would analyze the codeSnippet
    // possibly using more sophisticated methods or another AI model specialized in code analysis.
    // For now, it returns a generic response based on the suspected technology.
    // A more advanced version could try to determine confidence and harmfulness more accurately.
    const confidence = Math.random() * (0.9 - 0.5) + 0.5; // Random confidence between 0.5 and 0.9
    return {
      technology: toolInput.suspectedTechnology,
      confidence: parseFloat(confidence.toFixed(2)),
      isHarmful: false, // Placeholder: actual harm detection is complex
    };
  }
);

const analyzeWebsiteCodePrompt = ai.definePrompt({
  name: 'analyzeWebsiteCodePrompt',
  input: {schema: AnalyzeWebsiteCodeInputSchema}, // Expects { url: string }
  output: {schema: AnalyzeWebsiteCodeOutputSchema},
  tools: [technologyDetectionTool],
  prompt: `You are an expert in website security and code analysis. Your task is to analyze the website at the given URL to identify technologies and potential security concerns.

  Website URL: {{{url}}}

  Perform a thorough analysis of the website. Consider factors like:
  - HTML structure and meta tags
  - JavaScript files and global variables
  - Network requests made by the site
  - HTTP headers
  - Known signatures of common libraries and frameworks

  Based on your overall analysis of the website at the URL:
  1. Identify potential technologies (libraries, frameworks, CMS, etc.) used.
  2. For each significant technology you identify, try to find or infer a representative code snippet or pattern from your understanding of how that technology is typically used or exposed on a website.
  3. Then, use the 'detectTechnology' tool, providing that snippet and the suspected technology name, to get a detailed report (technology name, confidence, isHarmful).
  4. Compile a list of these detailed technology reports for the 'detectedTechnologies' field.
  5. Identify and list any potential security concerns in the 'securityConcerns' field. These could be related to outdated software, insecure configurations, mixed content, vulnerable libraries, etc.

  Ensure your final output strictly adheres to the required JSON schema.
  If no specific technologies or security concerns are confidently identified, return empty arrays for the respective fields.
`,
});

const analyzeWebsiteCodeFlow = ai.defineFlow(
  {
    name: 'analyzeWebsiteCodeFlow',
    inputSchema: AnalyzeWebsiteCodeInputSchema, // Flow input: { url: string }
    outputSchema: AnalyzeWebsiteCodeOutputSchema,
  },
  async (input) => { // `input` here is AnalyzeWebsiteCodeInput
    // The analyzeWebsiteCodePrompt is designed to take the URL,
    // perform analysis (potentially using its tools), and return
    // data matching AnalyzeWebsiteCodeOutputSchema.
    const {output} = await analyzeWebsiteCodePrompt(input);

    if (!output) {
      // This should ideally be caught by Genkit's schema validation if the LLM returns malformed/null output
      console.error('analyzeWebsiteCodePrompt returned no output. This might indicate an LLM or tool error, or invalid API key.');
      throw new Error('AI analysis failed to produce a structured output. Ensure the AI model can fulfill the request, use tools correctly, and the API key is valid.');
    }
    return output;
  }
);
