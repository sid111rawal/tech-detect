
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for analyzing website code to detect obfuscated or hidden libraries and frameworks.
 *
 * - analyzeWebsiteCode - A function that handles the website code analysis process.
 * - AnalyzeWebsiteCodeInput - The input type for the analyzeWebsiteCode function.
 * - AnalyzeWebsiteCodeOutput - The return type for the analyzeWebsiteCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { retrievePageContent, type PageContent } from '@/services/page-retriever';

const AnalyzeWebsiteCodeInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type AnalyzeWebsiteCodeInput = z.infer<typeof AnalyzeWebsiteCodeInputSchema>;

const TechnologyReportSchema = z.object({
  technology: z.string().describe('The detected technology or library.'),
  confidence: z.number().min(0).max(1).describe('Confidence level of the detection (0-1).'),
  isHarmful: z.boolean().describe('Whether the detected technology is potentially harmful.'),
});

const AnalyzeWebsiteCodeOutputSchema = z.object({
  detectedTechnologies: z.array(TechnologyReportSchema).describe('A list of detected technologies and their details.'),
  securityConcerns: z.array(z.string()).describe('A list of potential security concerns found in the website code.'),
});
export type AnalyzeWebsiteCodeOutput = z.infer<typeof AnalyzeWebsiteCodeOutputSchema>;

export async function analyzeWebsiteCode(input: AnalyzeWebsiteCodeInput): Promise<AnalyzeWebsiteCodeOutput> {
  console.log('[AIFlow] analyzeWebsiteCode (exported function) called with input:', input);
  return analyzeWebsiteCodeFlow(input);
}

const getWebsiteHtmlTool = ai.defineTool(
  {
    name: 'getWebsiteHtml',
    description: 'Retrieves the HTML content of a given website URL. This should be the first step in analyzing a website.',
    inputSchema: z.object({
      url: z.string().describe('The URL of the website to retrieve HTML from.'),
    }),
    outputSchema: z.object({
      html: z.string().nullable().describe('The HTML content of the website, or null if an error occurred.'),
      error: z.string().optional().describe('An error message if fetching failed.'),
    }),
  },
  async (input: { url: string }): Promise<PageContent> => {
    console.log('[AITool/getWebsiteHtml] Tool called with input:', input);
    const result = await retrievePageContent(input.url);
    console.log('[AITool/getWebsiteHtml] retrievePageContent result:', result);
    return result;
  }
);

const technologyDetectionTool = ai.defineTool({
  name: 'detectTechnology',
  description: 'Detects a technology or library used by the website, given a code snippet from its HTML. Call this for each technology you suspect based on overall HTML analysis.',
  inputSchema: z.object({
    htmlSnippet: z.string().describe('A relevant snippet of HTML code from the website that suggests a particular technology. The LLM must identify this snippet from the fetched HTML.'),
    suspectedTechnology: z.string().describe('The name of the technology suspected to be present based on the HTML snippet.')
  }),
  outputSchema: TechnologyReportSchema,
},
async (toolInput) => {
    console.log('[AITool/detectTechnology] Tool called with input:', toolInput);
    // Placeholder implementation - In a real scenario, this tool would analyze the htmlSnippet
    // possibly using more sophisticated methods or another AI model specialized in code analysis.
    // For now, it returns a generic response based on the suspected technology.
    const confidence = Math.random() * (0.9 - 0.5) + 0.5; // Random confidence between 0.5 and 0.9
    const result = {
      technology: toolInput.suspectedTechnology,
      confidence: parseFloat(confidence.toFixed(2)),
      isHarmful: false, // Placeholder: actual harm detection is complex
    };
    console.log('[AITool/detectTechnology] Tool returning result:', result);
    return result;
  }
);

const analyzeWebsiteCodePrompt = ai.definePrompt({
  name: 'analyzeWebsiteCodePrompt',
  input: {schema: AnalyzeWebsiteCodeInputSchema}, 
  output: {schema: AnalyzeWebsiteCodeOutputSchema},
  tools: [getWebsiteHtmlTool, technologyDetectionTool],
  prompt: `You are an expert in website security and code analysis.
  Your task is to analyze the HTML content of the website at the given URL to identify technologies and potential security concerns.

  Website URL: {{{url}}}

  1. First, use the 'getWebsiteHtml' tool with the Website URL to retrieve its HTML content.
  2. If fetching fails or returns no HTML (tool output has an error or html is null), your output for 'detectedTechnologies' must be an empty array. For 'securityConcerns', provide a single string in the array explaining the failure to retrieve content (e.g., "Failed to retrieve website content: [error message from tool]"). Do not attempt to use other tools or perform further analysis.
  3. If HTML is successfully retrieved (tool output has html content and no error):
     a. Perform a thorough analysis of THIS RETRIEVED HTML CONTENT. Consider factors like:
        - HTML structure and meta tags
        - Inline JavaScript (<script> tags) and linked script tags (analyze the <script src="..."> tags themselves, not by fetching external scripts)
        - CSS links and inline styles
        - Comments and other non-rendered content that might reveal information
        - Known signatures of common libraries and frameworks within the HTML.
     b. Based on your analysis of the RETRIEVED HTML:
        i. Identify potential technologies (libraries, frameworks, CMS, analytics, etc.) used.
        ii. For each significant technology you identify from the HTML, try to find or infer a representative HTML snippet or pattern from the HTML itself.
        iii. Then, use the 'detectTechnology' tool, providing that HTML snippet and the suspected technology name, to get a detailed report (technology name, confidence, isHarmful).
        iv. Compile a list of these detailed technology reports for the 'detectedTechnologies' field.
     c. Identify and list any potential security concerns evident from the RETRIEVED HTML in the 'securityConcerns' field. These could be related to:
        - Indicators of outdated software (e.g., old version numbers in comments or meta tags if present).
        - Insecure configurations visible in HTML (e.g., API keys in plaintext, though rare and highly unlikely for major sites).
        - Mixed content (http:// links for resources on an https:// page).
        - Presence of known vulnerable library versions if identifiable directly from HTML attributes or inline script comments.
        - Lack of common security headers if deducible from meta tags (e.g., Content-Security-Policy, though this is usually an HTTP header concern).
        - Exposure of sensitive information in comments or metadata.

  Ensure your final output strictly adheres to the required JSON schema.
  If HTML was retrieved but no specific technologies or security concerns are confidently identified from the HTML, return empty arrays for the respective fields.
`,
});

const analyzeWebsiteCodeFlow = ai.defineFlow(
  {
    name: 'analyzeWebsiteCodeFlow',
    inputSchema: AnalyzeWebsiteCodeInputSchema, 
    outputSchema: AnalyzeWebsiteCodeOutputSchema,
  },
  async (input) => { 
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Flow started with input:', input);
    const {output} = await analyzeWebsiteCodePrompt(input);
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Prompt output:', output);

    if (!output) {
      console.error('[AIFlow/analyzeWebsiteCodeFlow] analyzeWebsiteCodePrompt returned no output. This might indicate an LLM or tool error, or invalid API key. Check Genkit logs and tool execution.');
      // Construct a valid error output according to the schema
      return {
        detectedTechnologies: [],
        securityConcerns: ['AI analysis failed to produce a structured output. The AI model may have encountered an internal error or failed to follow instructions. Please check server logs.'],
      };
    }
    console.log('[AIFlow/analyzeWebsiteCodeFlow] Flow finished, returning output:', output);
    return output;
  }
);

