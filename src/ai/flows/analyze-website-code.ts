// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for analyzing website code to detect obfuscated or hidden libraries and frameworks.
 *
 * - analyzeWebsiteCode - A function that handles the website code analysis process.
 * - AnalyzeWebsiteCodeInput - The input type for the analyzeWebsiteCode function.
 * - AnalyzeWebsiteCodeOutput - The return type for the analyzeWebsiteCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {analyzeWebsite, WebsiteAnalysisResult} from '@/services/website-analysis';

const AnalyzeWebsiteCodeInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type AnalyzeWebsiteCodeInput = z.infer<typeof AnalyzeWebsiteCodeInputSchema>;

const TechnologyReportSchema = z.object({
  technology: z.string().describe('The detected technology or library.'),
  confidence: z.number().describe('Confidence level of the detection (0-1).'),
  isHarmful: z.boolean().describe('Whether the detected technology is potentially harmful.'),
});

const AnalyzeWebsiteCodeOutputSchema = z.object({
  detectedTechnologies: z.array(TechnologyReportSchema).describe('A list of detected technologies and their details.'),
  securityConcerns: z.array(z.string()).describe('A list of potential security concerns found in the website code.'),
});
export type AnalyzeWebsiteCodeOutput = z.infer<typeof AnalyzeWebsiteCodeOutputSchema>;

export async function analyzeWebsiteCode(input: AnalyzeWebsiteCodeInput): Promise<AnalyzeWebsiteCodeOutput> {
  return analyzeWebsiteCodeFlow(input);
}

const technologyDetectionTool = ai.defineTool({
  name: 'detectTechnology',
  description: 'Detects a technology or library used by the website.',
  inputSchema: z.object({
    codeSnippet: z.string().describe('A snippet of code from the website.'),
  }),
  outputSchema: z.object({
    technology: z.string().describe('The detected technology or library.'),
    confidence: z.number().describe('Confidence level of the detection (0-1).'),
    isHarmful: z.boolean().describe('Whether the detected technology is potentially harmful.'),
  }),
},
async (input) => {
    // Placeholder implementation - replace with actual AI-powered detection logic
    // This tool should analyze the codeSnippet and identify technologies, confidence, and potential harm.
    return {
      technology: 'ExampleTechnology',
      confidence: 0.75,
      isHarmful: false,
    };
  }
);

const analyzeWebsiteCodePrompt = ai.definePrompt({
  name: 'analyzeWebsiteCodePrompt',
  input: {schema: AnalyzeWebsiteCodeInputSchema},
  output: {schema: AnalyzeWebsiteCodeOutputSchema},
  tools: [technologyDetectionTool],
  prompt: `You are an expert in website security and code analysis. Your task is to analyze a website to identify technologies and potential security concerns.

  Analyze the provided website and its code to detect any hidden or obfuscated libraries and frameworks.
  Pay close attention to any unusual or potentially harmful technologies.

  Consider these factors:
  - Code patterns and signatures
  - Network requests and behaviors
  - DOM changes during runtime

  Website URL: {{{url}}}

  Based on your analysis, provide a list of detected technologies, their confidence levels, and whether they are potentially harmful.  Also, list any security concerns identified.

  If you identify a technology, use the detectTechnology tool to get more information about it.
`,
});

const analyzeWebsiteCodeFlow = ai.defineFlow(
  {
    name: 'analyzeWebsiteCodeFlow',
    inputSchema: AnalyzeWebsiteCodeInputSchema,
    outputSchema: AnalyzeWebsiteCodeOutputSchema,
  },
  async input => {
    const websiteAnalysis: WebsiteAnalysisResult = await analyzeWebsite(input.url);

    // Example of using the technologyDetectionTool
    const technologyReports = await Promise.all(
      websiteAnalysis.detectedTechnologies.map(async technology => {
        // In a real implementation, we'd fetch actual code snippets related to the technology.
        const codeSnippet = `Example code snippet for ${technology}`;
        return await technologyDetectionTool({
          codeSnippet,
        });
      })
    );

    const {output} = await analyzeWebsiteCodePrompt({
      ...input,
    });

    return {
      detectedTechnologies: technologyReports,
      securityConcerns: websiteAnalysis.securityConcerns,
    };
  }
);
